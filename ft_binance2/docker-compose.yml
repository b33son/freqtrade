# dcr = docker-compose run --rm

# Start Webinterface in Docker
# Ensure port uncommented in docker-compose.yml set to 8080:8080
#   docker-compose up -d
#   dc up -d

# Download Data
#   dcr freqtrade download-data --exchange binance -t 5m

# Backtest
# -s = strategy
# -i = interval
#   dcr freqtrade backtesting --datadir user_data/data/binance --export trades --stake-amount 100 -s Strategy000 -i 5m

# Plot Strategy
#   1) Switch build from stable to plot in docker-compose.yml by uncommenting plot
#   2) dcr freqtrade plot-dataframe --strategy Strategy000 -p ETH/USDT -i 5m

# List Downloaded Data
#   dcr freqtrade list-data --exchange binance
# Optimize
#   dcr freqtrade hyperopt --hyperopt-loss SharpeHyperOptLoss --strategy Strategy004 -i 5m -e 2

---
version: "3"
services:
  freqtrade:
    image: freqtradeorg/freqtrade:stable
    # image: freqtradeorg/freqtrade:develop
    # Use plotting image
    # image: freqtradeorg/freqtrade:develop_plot
    # Build step - only needed when additional dependencies are needed
    # build:
    #   context: .
    #   dockerfile: "./docker/Dockerfile.custom"
    restart: unless-stopped
    container_name: freqtrade
    volumes:
      - "./user_data:/freqtrade/user_data"
    # Expose api on port 8080 (localhost only)
    # Please read the https://www.freqtrade.io/en/latest/rest-api/ documentation
    # before enabling this.
    ports:
      - "8080:8080"
    # Default command used when running `docker compose up`
    command: >
      trade
      --logfile /freqtrade/user_data/logs/freqtrade.log
      --db-url sqlite:////freqtrade/user_data/tradesv3.sqlite
      --config /freqtrade/user_data/config.json
      --strategy SampleStrategy
